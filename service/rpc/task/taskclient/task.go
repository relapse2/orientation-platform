// Code generated by goctl. DO NOT EDIT.
// Source: task.proto

package taskclient

import (
	"context"

	"orientation-platform/service/rpc/task/types/task"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AdminCheckTaskRequest = task.AdminCheckTaskRequest
	DoTaskReply           = task.DoTaskReply
	DoTaskRequest         = task.DoTaskRequest
	Empty                 = task.Empty
	FailTaskListReply     = task.FailTaskListReply
	GetTaskListRequest    = task.GetTaskListRequest
	Rank                  = task.Rank
	RankReply             = task.RankReply
	RankRequest           = task.RankRequest
	TaskInfo              = task.TaskInfo
	TaskInfoReply         = task.TaskInfoReply
	TaskInfoRequest       = task.TaskInfoRequest
	TaskInitRequest       = task.TaskInitRequest
	TaskListReply         = task.TaskListReply
	TaskSetRequest        = task.TaskSetRequest
	TaskVisualReply       = task.TaskVisualReply

	Task interface {
		GetTaskList(ctx context.Context, in *GetTaskListRequest, opts ...grpc.CallOption) (*TaskListReply, error)
		TaskSet(ctx context.Context, in *TaskSetRequest, opts ...grpc.CallOption) (*Empty, error)
		TaskInit(ctx context.Context, in *TaskInitRequest, opts ...grpc.CallOption) (*Empty, error)
		DoTask(ctx context.Context, in *DoTaskRequest, opts ...grpc.CallOption) (*DoTaskReply, error)
		TaskInfo(ctx context.Context, in *TaskInfoRequest, opts ...grpc.CallOption) (*TaskInfoReply, error)
		Rank(ctx context.Context, in *RankRequest, opts ...grpc.CallOption) (*RankReply, error)
		FailTaskList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FailTaskListReply, error)
		FailTask(ctx context.Context, in *AdminCheckTaskRequest, opts ...grpc.CallOption) (*Empty, error)
		SuccessTask(ctx context.Context, in *AdminCheckTaskRequest, opts ...grpc.CallOption) (*Empty, error)
		TaskVisual(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TaskVisualReply, error)
	}

	defaultTask struct {
		cli zrpc.Client
	}
)

func NewTask(cli zrpc.Client) Task {
	return &defaultTask{
		cli: cli,
	}
}

func (m *defaultTask) GetTaskList(ctx context.Context, in *GetTaskListRequest, opts ...grpc.CallOption) (*TaskListReply, error) {
	client := task.NewTaskClient(m.cli.Conn())
	return client.GetTaskList(ctx, in, opts...)
}

func (m *defaultTask) TaskSet(ctx context.Context, in *TaskSetRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := task.NewTaskClient(m.cli.Conn())
	return client.TaskSet(ctx, in, opts...)
}

func (m *defaultTask) TaskInit(ctx context.Context, in *TaskInitRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := task.NewTaskClient(m.cli.Conn())
	return client.TaskInit(ctx, in, opts...)
}

func (m *defaultTask) DoTask(ctx context.Context, in *DoTaskRequest, opts ...grpc.CallOption) (*DoTaskReply, error) {
	client := task.NewTaskClient(m.cli.Conn())
	return client.DoTask(ctx, in, opts...)
}

func (m *defaultTask) TaskInfo(ctx context.Context, in *TaskInfoRequest, opts ...grpc.CallOption) (*TaskInfoReply, error) {
	client := task.NewTaskClient(m.cli.Conn())
	return client.TaskInfo(ctx, in, opts...)
}

func (m *defaultTask) Rank(ctx context.Context, in *RankRequest, opts ...grpc.CallOption) (*RankReply, error) {
	client := task.NewTaskClient(m.cli.Conn())
	return client.Rank(ctx, in, opts...)
}

func (m *defaultTask) FailTaskList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FailTaskListReply, error) {
	client := task.NewTaskClient(m.cli.Conn())
	return client.FailTaskList(ctx, in, opts...)
}

func (m *defaultTask) FailTask(ctx context.Context, in *AdminCheckTaskRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := task.NewTaskClient(m.cli.Conn())
	return client.FailTask(ctx, in, opts...)
}

func (m *defaultTask) SuccessTask(ctx context.Context, in *AdminCheckTaskRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := task.NewTaskClient(m.cli.Conn())
	return client.SuccessTask(ctx, in, opts...)
}

func (m *defaultTask) TaskVisual(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TaskVisualReply, error) {
	client := task.NewTaskClient(m.cli.Conn())
	return client.TaskVisual(ctx, in, opts...)
}
