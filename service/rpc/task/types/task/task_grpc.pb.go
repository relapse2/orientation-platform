// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: service/rpc/task/task.proto

package task

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskClient is the client API for Task service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskClient interface {
	GetTaskList(ctx context.Context, in *GetTaskListRequest, opts ...grpc.CallOption) (*TaskListReply, error)
	TaskSet(ctx context.Context, in *TaskSetRequest, opts ...grpc.CallOption) (*Empty, error)
	TaskInit(ctx context.Context, in *TaskInitRequest, opts ...grpc.CallOption) (*Empty, error)
	DoTask(ctx context.Context, in *DoTaskRequest, opts ...grpc.CallOption) (*DoTaskReply, error)
	TaskInfo(ctx context.Context, in *TaskInfoRequest, opts ...grpc.CallOption) (*TaskInfoReply, error)
	Rank(ctx context.Context, in *RankRequest, opts ...grpc.CallOption) (*RankReply, error)
	FailTaskList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FailTaskListReply, error)
	FailTask(ctx context.Context, in *AdminCheckTaskRequest, opts ...grpc.CallOption) (*Empty, error)
	SuccessTask(ctx context.Context, in *AdminCheckTaskRequest, opts ...grpc.CallOption) (*Empty, error)
	TaskVisual(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TaskVisualReply, error)
}

type taskClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskClient(cc grpc.ClientConnInterface) TaskClient {
	return &taskClient{cc}
}

func (c *taskClient) GetTaskList(ctx context.Context, in *GetTaskListRequest, opts ...grpc.CallOption) (*TaskListReply, error) {
	out := new(TaskListReply)
	err := c.cc.Invoke(ctx, "/task.Task/GetTaskList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) TaskSet(ctx context.Context, in *TaskSetRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/task.Task/TaskSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) TaskInit(ctx context.Context, in *TaskInitRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/task.Task/TaskInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) DoTask(ctx context.Context, in *DoTaskRequest, opts ...grpc.CallOption) (*DoTaskReply, error) {
	out := new(DoTaskReply)
	err := c.cc.Invoke(ctx, "/task.Task/DoTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) TaskInfo(ctx context.Context, in *TaskInfoRequest, opts ...grpc.CallOption) (*TaskInfoReply, error) {
	out := new(TaskInfoReply)
	err := c.cc.Invoke(ctx, "/task.Task/TaskInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) Rank(ctx context.Context, in *RankRequest, opts ...grpc.CallOption) (*RankReply, error) {
	out := new(RankReply)
	err := c.cc.Invoke(ctx, "/task.Task/Rank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) FailTaskList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FailTaskListReply, error) {
	out := new(FailTaskListReply)
	err := c.cc.Invoke(ctx, "/task.Task/FailTaskList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) FailTask(ctx context.Context, in *AdminCheckTaskRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/task.Task/FailTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) SuccessTask(ctx context.Context, in *AdminCheckTaskRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/task.Task/SuccessTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) TaskVisual(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TaskVisualReply, error) {
	out := new(TaskVisualReply)
	err := c.cc.Invoke(ctx, "/task.Task/TaskVisual", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServer is the server API for Task service.
// All implementations must embed UnimplementedTaskServer
// for forward compatibility
type TaskServer interface {
	GetTaskList(context.Context, *GetTaskListRequest) (*TaskListReply, error)
	TaskSet(context.Context, *TaskSetRequest) (*Empty, error)
	TaskInit(context.Context, *TaskInitRequest) (*Empty, error)
	DoTask(context.Context, *DoTaskRequest) (*DoTaskReply, error)
	TaskInfo(context.Context, *TaskInfoRequest) (*TaskInfoReply, error)
	Rank(context.Context, *RankRequest) (*RankReply, error)
	FailTaskList(context.Context, *Empty) (*FailTaskListReply, error)
	FailTask(context.Context, *AdminCheckTaskRequest) (*Empty, error)
	SuccessTask(context.Context, *AdminCheckTaskRequest) (*Empty, error)
	TaskVisual(context.Context, *Empty) (*TaskVisualReply, error)
	mustEmbedUnimplementedTaskServer()
}

// UnimplementedTaskServer must be embedded to have forward compatible implementations.
type UnimplementedTaskServer struct {
}

func (UnimplementedTaskServer) GetTaskList(context.Context, *GetTaskListRequest) (*TaskListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskList not implemented")
}
func (UnimplementedTaskServer) TaskSet(context.Context, *TaskSetRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSet not implemented")
}
func (UnimplementedTaskServer) TaskInit(context.Context, *TaskInitRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskInit not implemented")
}
func (UnimplementedTaskServer) DoTask(context.Context, *DoTaskRequest) (*DoTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoTask not implemented")
}
func (UnimplementedTaskServer) TaskInfo(context.Context, *TaskInfoRequest) (*TaskInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskInfo not implemented")
}
func (UnimplementedTaskServer) Rank(context.Context, *RankRequest) (*RankReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rank not implemented")
}
func (UnimplementedTaskServer) FailTaskList(context.Context, *Empty) (*FailTaskListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FailTaskList not implemented")
}
func (UnimplementedTaskServer) FailTask(context.Context, *AdminCheckTaskRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FailTask not implemented")
}
func (UnimplementedTaskServer) SuccessTask(context.Context, *AdminCheckTaskRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuccessTask not implemented")
}
func (UnimplementedTaskServer) TaskVisual(context.Context, *Empty) (*TaskVisualReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskVisual not implemented")
}
func (UnimplementedTaskServer) mustEmbedUnimplementedTaskServer() {}

// UnsafeTaskServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskServer will
// result in compilation errors.
type UnsafeTaskServer interface {
	mustEmbedUnimplementedTaskServer()
}

func RegisterTaskServer(s grpc.ServiceRegistrar, srv TaskServer) {
	s.RegisterService(&Task_ServiceDesc, srv)
}

func _Task_GetTaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetTaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.Task/GetTaskList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetTaskList(ctx, req.(*GetTaskListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_TaskSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).TaskSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.Task/TaskSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).TaskSet(ctx, req.(*TaskSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_TaskInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).TaskInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.Task/TaskInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).TaskInit(ctx, req.(*TaskInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_DoTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).DoTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.Task/DoTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).DoTask(ctx, req.(*DoTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_TaskInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).TaskInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.Task/TaskInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).TaskInfo(ctx, req.(*TaskInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_Rank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).Rank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.Task/Rank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).Rank(ctx, req.(*RankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_FailTaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).FailTaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.Task/FailTaskList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).FailTaskList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_FailTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCheckTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).FailTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.Task/FailTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).FailTask(ctx, req.(*AdminCheckTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_SuccessTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCheckTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).SuccessTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.Task/SuccessTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).SuccessTask(ctx, req.(*AdminCheckTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_TaskVisual_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).TaskVisual(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.Task/TaskVisual",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).TaskVisual(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Task_ServiceDesc is the grpc.ServiceDesc for Task service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Task_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "task.Task",
	HandlerType: (*TaskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTaskList",
			Handler:    _Task_GetTaskList_Handler,
		},
		{
			MethodName: "TaskSet",
			Handler:    _Task_TaskSet_Handler,
		},
		{
			MethodName: "TaskInit",
			Handler:    _Task_TaskInit_Handler,
		},
		{
			MethodName: "DoTask",
			Handler:    _Task_DoTask_Handler,
		},
		{
			MethodName: "TaskInfo",
			Handler:    _Task_TaskInfo_Handler,
		},
		{
			MethodName: "Rank",
			Handler:    _Task_Rank_Handler,
		},
		{
			MethodName: "FailTaskList",
			Handler:    _Task_FailTaskList_Handler,
		},
		{
			MethodName: "FailTask",
			Handler:    _Task_FailTask_Handler,
		},
		{
			MethodName: "SuccessTask",
			Handler:    _Task_SuccessTask_Handler,
		},
		{
			MethodName: "TaskVisual",
			Handler:    _Task_TaskVisual_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/rpc/task/task.proto",
}
