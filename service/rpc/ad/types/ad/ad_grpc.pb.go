// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: service/rpc/ad/ad.proto

package ad

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdClient is the client API for Ad service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdClient interface {
	AdminSetAd(ctx context.Context, in *AdminSetAdRequest, opts ...grpc.CallOption) (*Empty, error)
	CheckCost(ctx context.Context, in *CheckCostRequest, opts ...grpc.CallOption) (*CheckCostReply, error)
	AdList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AdListReply, error)
	AdInfo(ctx context.Context, in *AdInfoRequest, opts ...grpc.CallOption) (*AdInfoReply, error)
	ClickAd(ctx context.Context, in *ClickAdRequest, opts ...grpc.CallOption) (*Empty, error)
	SendAd(ctx context.Context, in *SendAdRequest, opts ...grpc.CallOption) (*SendAdReply, error)
}

type adClient struct {
	cc grpc.ClientConnInterface
}

func NewAdClient(cc grpc.ClientConnInterface) AdClient {
	return &adClient{cc}
}

func (c *adClient) AdminSetAd(ctx context.Context, in *AdminSetAdRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ad.Ad/AdminSetAd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adClient) CheckCost(ctx context.Context, in *CheckCostRequest, opts ...grpc.CallOption) (*CheckCostReply, error) {
	out := new(CheckCostReply)
	err := c.cc.Invoke(ctx, "/ad.Ad/CheckCost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adClient) AdList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AdListReply, error) {
	out := new(AdListReply)
	err := c.cc.Invoke(ctx, "/ad.Ad/AdList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adClient) AdInfo(ctx context.Context, in *AdInfoRequest, opts ...grpc.CallOption) (*AdInfoReply, error) {
	out := new(AdInfoReply)
	err := c.cc.Invoke(ctx, "/ad.Ad/AdInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adClient) ClickAd(ctx context.Context, in *ClickAdRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ad.Ad/ClickAd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adClient) SendAd(ctx context.Context, in *SendAdRequest, opts ...grpc.CallOption) (*SendAdReply, error) {
	out := new(SendAdReply)
	err := c.cc.Invoke(ctx, "/ad.Ad/SendAd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdServer is the server API for Ad service.
// All implementations must embed UnimplementedAdServer
// for forward compatibility
type AdServer interface {
	AdminSetAd(context.Context, *AdminSetAdRequest) (*Empty, error)
	CheckCost(context.Context, *CheckCostRequest) (*CheckCostReply, error)
	AdList(context.Context, *Empty) (*AdListReply, error)
	AdInfo(context.Context, *AdInfoRequest) (*AdInfoReply, error)
	ClickAd(context.Context, *ClickAdRequest) (*Empty, error)
	SendAd(context.Context, *SendAdRequest) (*SendAdReply, error)
	mustEmbedUnimplementedAdServer()
}

// UnimplementedAdServer must be embedded to have forward compatible implementations.
type UnimplementedAdServer struct {
}

func (UnimplementedAdServer) AdminSetAd(context.Context, *AdminSetAdRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminSetAd not implemented")
}
func (UnimplementedAdServer) CheckCost(context.Context, *CheckCostRequest) (*CheckCostReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCost not implemented")
}
func (UnimplementedAdServer) AdList(context.Context, *Empty) (*AdListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdList not implemented")
}
func (UnimplementedAdServer) AdInfo(context.Context, *AdInfoRequest) (*AdInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdInfo not implemented")
}
func (UnimplementedAdServer) ClickAd(context.Context, *ClickAdRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClickAd not implemented")
}
func (UnimplementedAdServer) SendAd(context.Context, *SendAdRequest) (*SendAdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAd not implemented")
}
func (UnimplementedAdServer) mustEmbedUnimplementedAdServer() {}

// UnsafeAdServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdServer will
// result in compilation errors.
type UnsafeAdServer interface {
	mustEmbedUnimplementedAdServer()
}

func RegisterAdServer(s grpc.ServiceRegistrar, srv AdServer) {
	s.RegisterService(&Ad_ServiceDesc, srv)
}

func _Ad_AdminSetAd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminSetAdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdServer).AdminSetAd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ad.Ad/AdminSetAd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdServer).AdminSetAd(ctx, req.(*AdminSetAdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ad_CheckCost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdServer).CheckCost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ad.Ad/CheckCost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdServer).CheckCost(ctx, req.(*CheckCostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ad_AdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdServer).AdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ad.Ad/AdList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdServer).AdList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ad_AdInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdServer).AdInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ad.Ad/AdInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdServer).AdInfo(ctx, req.(*AdInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ad_ClickAd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClickAdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdServer).ClickAd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ad.Ad/ClickAd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdServer).ClickAd(ctx, req.(*ClickAdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ad_SendAd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendAdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdServer).SendAd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ad.Ad/SendAd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdServer).SendAd(ctx, req.(*SendAdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ad_ServiceDesc is the grpc.ServiceDesc for Ad service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ad_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ad.Ad",
	HandlerType: (*AdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdminSetAd",
			Handler:    _Ad_AdminSetAd_Handler,
		},
		{
			MethodName: "CheckCost",
			Handler:    _Ad_CheckCost_Handler,
		},
		{
			MethodName: "AdList",
			Handler:    _Ad_AdList_Handler,
		},
		{
			MethodName: "AdInfo",
			Handler:    _Ad_AdInfo_Handler,
		},
		{
			MethodName: "ClickAd",
			Handler:    _Ad_ClickAd_Handler,
		},
		{
			MethodName: "SendAd",
			Handler:    _Ad_SendAd_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/rpc/ad/ad.proto",
}
