// Code generated by goctl. DO NOT EDIT.
// Source: ad.proto

package adclient

import (
	"context"

	"orientation-platform/service/rpc/ad/types/ad"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AdInfo            = ad.AdInfo
	AdInfoReply       = ad.AdInfoReply
	AdInfoRequest     = ad.AdInfoRequest
	AdListReply       = ad.AdListReply
	AdminSetAdRequest = ad.AdminSetAdRequest
	CheckCostReply    = ad.CheckCostReply
	CheckCostRequest  = ad.CheckCostRequest
	ClickAdRequest    = ad.ClickAdRequest
	Empty             = ad.Empty
	SendAdReply       = ad.SendAdReply
	SendAdRequest     = ad.SendAdRequest

	Ad interface {
		AdminSetAd(ctx context.Context, in *AdminSetAdRequest, opts ...grpc.CallOption) (*Empty, error)
		CheckCost(ctx context.Context, in *CheckCostRequest, opts ...grpc.CallOption) (*CheckCostReply, error)
		AdList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AdListReply, error)
		AdInfo(ctx context.Context, in *AdInfoRequest, opts ...grpc.CallOption) (*AdInfoReply, error)
		ClickAd(ctx context.Context, in *ClickAdRequest, opts ...grpc.CallOption) (*Empty, error)
		SendAd(ctx context.Context, in *SendAdRequest, opts ...grpc.CallOption) (*SendAdReply, error)
	}

	defaultAd struct {
		cli zrpc.Client
	}
)

func NewAd(cli zrpc.Client) Ad {
	return &defaultAd{
		cli: cli,
	}
}

func (m *defaultAd) AdminSetAd(ctx context.Context, in *AdminSetAdRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := ad.NewAdClient(m.cli.Conn())
	return client.AdminSetAd(ctx, in, opts...)
}

func (m *defaultAd) CheckCost(ctx context.Context, in *CheckCostRequest, opts ...grpc.CallOption) (*CheckCostReply, error) {
	client := ad.NewAdClient(m.cli.Conn())
	return client.CheckCost(ctx, in, opts...)
}

func (m *defaultAd) AdList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AdListReply, error) {
	client := ad.NewAdClient(m.cli.Conn())
	return client.AdList(ctx, in, opts...)
}

func (m *defaultAd) AdInfo(ctx context.Context, in *AdInfoRequest, opts ...grpc.CallOption) (*AdInfoReply, error) {
	client := ad.NewAdClient(m.cli.Conn())
	return client.AdInfo(ctx, in, opts...)
}

func (m *defaultAd) ClickAd(ctx context.Context, in *ClickAdRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := ad.NewAdClient(m.cli.Conn())
	return client.ClickAd(ctx, in, opts...)
}

func (m *defaultAd) SendAd(ctx context.Context, in *SendAdRequest, opts ...grpc.CallOption) (*SendAdReply, error) {
	client := ad.NewAdClient(m.cli.Conn())
	return client.SendAd(ctx, in, opts...)
}
