// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package server

import (
	"context"

	"orientation-platform/service/rpc/user/internal/logic"
	"orientation-platform/service/rpc/user/internal/svc"
	"orientation-platform/service/rpc/user/types/user"
)

type UserServer struct {
	svcCtx *svc.ServiceContext
	user.UnimplementedUserServer
}

func NewUserServer(svcCtx *svc.ServiceContext) *UserServer {
	return &UserServer{
		svcCtx: svcCtx,
	}
}

func (s *UserServer) GetUserByName(ctx context.Context, in *user.GetUserByNameRequest) (*user.GetUserReply, error) {
	l := logic.NewGetUserByNameLogic(ctx, s.svcCtx)
	return l.GetUserByName(in)
}

func (s *UserServer) GetUserById(ctx context.Context, in *user.GetUserByIdRequest) (*user.GetUserReply, error) {
	l := logic.NewGetUserByIdLogic(ctx, s.svcCtx)
	return l.GetUserById(in)
}

func (s *UserServer) GetUserIdByCollage(ctx context.Context, in *user.GetUserIdByCollageRequest) (*user.GetUserIdByCollageReply, error) {
	l := logic.NewGetUserIdByCollageLogic(ctx, s.svcCtx)
	return l.GetUserIdByCollage(in)
}

func (s *UserServer) GetAdminByName(ctx context.Context, in *user.GetAdminByNameRequest) (*user.GetAdminReply, error) {
	l := logic.NewGetAdminByNameLogic(ctx, s.svcCtx)
	return l.GetAdminByName(in)
}

func (s *UserServer) CreateUser(ctx context.Context, in *user.CreateUserRequest) (*user.CreatUserReply, error) {
	l := logic.NewCreateUserLogic(ctx, s.svcCtx)
	return l.CreateUser(in)
}

func (s *UserServer) UpdateChar(ctx context.Context, in *user.UpgradeCharRequest) (*user.Empty, error) {
	l := logic.NewUpdateCharLogic(ctx, s.svcCtx)
	return l.UpdateChar(in)
}

func (s *UserServer) AdminLoadStu(ctx context.Context, in *user.AdminLoadStuRequest) (*user.Empty, error) {
	l := logic.NewAdminLoadStuLogic(ctx, s.svcCtx)
	return l.AdminLoadStu(in)
}

func (s *UserServer) UserVisual(ctx context.Context, in *user.Empty) (*user.UserVisualReply, error) {
	l := logic.NewUserVisualLogic(ctx, s.svcCtx)
	return l.UserVisual(in)
}

func (s *UserServer) RankByPoints(ctx context.Context, in *user.Empty) (*user.RankByPointsReply, error) {
	l := logic.NewRankByPointsLogic(ctx, s.svcCtx)
	return l.RankByPoints(in)
}
