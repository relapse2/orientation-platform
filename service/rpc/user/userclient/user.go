// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package userclient

import (
	"context"

	"orientation-platform/service/rpc/user/types/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AdminLoadStuRequest       = user.AdminLoadStuRequest
	CreatUserReply            = user.CreatUserReply
	CreateUserRequest         = user.CreateUserRequest
	Empty                     = user.Empty
	GetAdminByNameRequest     = user.GetAdminByNameRequest
	GetAdminReply             = user.GetAdminReply
	GetUserByIdRequest        = user.GetUserByIdRequest
	GetUserByNameRequest      = user.GetUserByNameRequest
	GetUserIdByCollageReply   = user.GetUserIdByCollageReply
	GetUserIdByCollageRequest = user.GetUserIdByCollageRequest
	GetUserReply              = user.GetUserReply
	Rank                      = user.Rank
	RankByPointsReply         = user.RankByPointsReply
	Student                   = user.Student
	UpgradeCharRequest        = user.UpgradeCharRequest
	UserVisualReply           = user.UserVisualReply

	User interface {
		GetUserByName(ctx context.Context, in *GetUserByNameRequest, opts ...grpc.CallOption) (*GetUserReply, error)
		GetUserById(ctx context.Context, in *GetUserByIdRequest, opts ...grpc.CallOption) (*GetUserReply, error)
		GetUserIdByCollage(ctx context.Context, in *GetUserIdByCollageRequest, opts ...grpc.CallOption) (*GetUserIdByCollageReply, error)
		GetAdminByName(ctx context.Context, in *GetAdminByNameRequest, opts ...grpc.CallOption) (*GetAdminReply, error)
		CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreatUserReply, error)
		UpdateChar(ctx context.Context, in *UpgradeCharRequest, opts ...grpc.CallOption) (*Empty, error)
		AdminLoadStu(ctx context.Context, in *AdminLoadStuRequest, opts ...grpc.CallOption) (*Empty, error)
		UserVisual(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserVisualReply, error)
		RankByPoints(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RankByPointsReply, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) GetUserByName(ctx context.Context, in *GetUserByNameRequest, opts ...grpc.CallOption) (*GetUserReply, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetUserByName(ctx, in, opts...)
}

func (m *defaultUser) GetUserById(ctx context.Context, in *GetUserByIdRequest, opts ...grpc.CallOption) (*GetUserReply, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetUserById(ctx, in, opts...)
}

func (m *defaultUser) GetUserIdByCollage(ctx context.Context, in *GetUserIdByCollageRequest, opts ...grpc.CallOption) (*GetUserIdByCollageReply, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetUserIdByCollage(ctx, in, opts...)
}

func (m *defaultUser) GetAdminByName(ctx context.Context, in *GetAdminByNameRequest, opts ...grpc.CallOption) (*GetAdminReply, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetAdminByName(ctx, in, opts...)
}

func (m *defaultUser) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreatUserReply, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.CreateUser(ctx, in, opts...)
}

func (m *defaultUser) UpdateChar(ctx context.Context, in *UpgradeCharRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UpdateChar(ctx, in, opts...)
}

func (m *defaultUser) AdminLoadStu(ctx context.Context, in *AdminLoadStuRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.AdminLoadStu(ctx, in, opts...)
}

func (m *defaultUser) UserVisual(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserVisualReply, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UserVisual(ctx, in, opts...)
}

func (m *defaultUser) RankByPoints(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RankByPointsReply, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.RankByPoints(ctx, in, opts...)
}
