// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: service/rpc/user/user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	GetUserByName(ctx context.Context, in *GetUserByNameRequest, opts ...grpc.CallOption) (*GetUserReply, error)
	GetUserById(ctx context.Context, in *GetUserByIdRequest, opts ...grpc.CallOption) (*GetUserReply, error)
	GetUserIdByCollage(ctx context.Context, in *GetUserIdByCollageRequest, opts ...grpc.CallOption) (*GetUserIdByCollageReply, error)
	GetAdminByName(ctx context.Context, in *GetAdminByNameRequest, opts ...grpc.CallOption) (*GetAdminReply, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreatUserReply, error)
	UpdateChar(ctx context.Context, in *UpgradeCharRequest, opts ...grpc.CallOption) (*Empty, error)
	AdminLoadStu(ctx context.Context, in *AdminLoadStuRequest, opts ...grpc.CallOption) (*Empty, error)
	UserVisual(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserVisualReply, error)
	RankByPoints(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RankByPointsReply, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) GetUserByName(ctx context.Context, in *GetUserByNameRequest, opts ...grpc.CallOption) (*GetUserReply, error) {
	out := new(GetUserReply)
	err := c.cc.Invoke(ctx, "/user.User/GetUserByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserById(ctx context.Context, in *GetUserByIdRequest, opts ...grpc.CallOption) (*GetUserReply, error) {
	out := new(GetUserReply)
	err := c.cc.Invoke(ctx, "/user.User/GetUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserIdByCollage(ctx context.Context, in *GetUserIdByCollageRequest, opts ...grpc.CallOption) (*GetUserIdByCollageReply, error) {
	out := new(GetUserIdByCollageReply)
	err := c.cc.Invoke(ctx, "/user.User/GetUserIdByCollage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetAdminByName(ctx context.Context, in *GetAdminByNameRequest, opts ...grpc.CallOption) (*GetAdminReply, error) {
	out := new(GetAdminReply)
	err := c.cc.Invoke(ctx, "/user.User/GetAdminByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreatUserReply, error) {
	out := new(CreatUserReply)
	err := c.cc.Invoke(ctx, "/user.User/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateChar(ctx context.Context, in *UpgradeCharRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/user.User/UpdateChar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AdminLoadStu(ctx context.Context, in *AdminLoadStuRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/user.User/AdminLoadStu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserVisual(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserVisualReply, error) {
	out := new(UserVisualReply)
	err := c.cc.Invoke(ctx, "/user.User/UserVisual", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) RankByPoints(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RankByPointsReply, error) {
	out := new(RankByPointsReply)
	err := c.cc.Invoke(ctx, "/user.User/RankByPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	GetUserByName(context.Context, *GetUserByNameRequest) (*GetUserReply, error)
	GetUserById(context.Context, *GetUserByIdRequest) (*GetUserReply, error)
	GetUserIdByCollage(context.Context, *GetUserIdByCollageRequest) (*GetUserIdByCollageReply, error)
	GetAdminByName(context.Context, *GetAdminByNameRequest) (*GetAdminReply, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreatUserReply, error)
	UpdateChar(context.Context, *UpgradeCharRequest) (*Empty, error)
	AdminLoadStu(context.Context, *AdminLoadStuRequest) (*Empty, error)
	UserVisual(context.Context, *Empty) (*UserVisualReply, error)
	RankByPoints(context.Context, *Empty) (*RankByPointsReply, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) GetUserByName(context.Context, *GetUserByNameRequest) (*GetUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByName not implemented")
}
func (UnimplementedUserServer) GetUserById(context.Context, *GetUserByIdRequest) (*GetUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (UnimplementedUserServer) GetUserIdByCollage(context.Context, *GetUserIdByCollageRequest) (*GetUserIdByCollageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserIdByCollage not implemented")
}
func (UnimplementedUserServer) GetAdminByName(context.Context, *GetAdminByNameRequest) (*GetAdminReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminByName not implemented")
}
func (UnimplementedUserServer) CreateUser(context.Context, *CreateUserRequest) (*CreatUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServer) UpdateChar(context.Context, *UpgradeCharRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChar not implemented")
}
func (UnimplementedUserServer) AdminLoadStu(context.Context, *AdminLoadStuRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminLoadStu not implemented")
}
func (UnimplementedUserServer) UserVisual(context.Context, *Empty) (*UserVisualReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserVisual not implemented")
}
func (UnimplementedUserServer) RankByPoints(context.Context, *Empty) (*RankByPointsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RankByPoints not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_GetUserByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GetUserByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserByName(ctx, req.(*GetUserByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GetUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserById(ctx, req.(*GetUserByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserIdByCollage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserIdByCollageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserIdByCollage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GetUserIdByCollage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserIdByCollage(ctx, req.(*GetUserIdByCollageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetAdminByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetAdminByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GetAdminByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetAdminByName(ctx, req.(*GetAdminByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateChar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeCharRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateChar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/UpdateChar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateChar(ctx, req.(*UpgradeCharRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AdminLoadStu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminLoadStuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AdminLoadStu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/AdminLoadStu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AdminLoadStu(ctx, req.(*AdminLoadStuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserVisual_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserVisual(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/UserVisual",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserVisual(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_RankByPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).RankByPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/RankByPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).RankByPoints(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserByName",
			Handler:    _User_GetUserByName_Handler,
		},
		{
			MethodName: "GetUserById",
			Handler:    _User_GetUserById_Handler,
		},
		{
			MethodName: "GetUserIdByCollage",
			Handler:    _User_GetUserIdByCollage_Handler,
		},
		{
			MethodName: "GetAdminByName",
			Handler:    _User_GetAdminByName_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _User_CreateUser_Handler,
		},
		{
			MethodName: "UpdateChar",
			Handler:    _User_UpdateChar_Handler,
		},
		{
			MethodName: "AdminLoadStu",
			Handler:    _User_AdminLoadStu_Handler,
		},
		{
			MethodName: "UserVisual",
			Handler:    _User_UserVisual_Handler,
		},
		{
			MethodName: "RankByPoints",
			Handler:    _User_RankByPoints_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/rpc/user/user.proto",
}
